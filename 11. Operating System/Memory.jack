// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 

class Memory {

    static Array ram;
    static int heap;
    static int freeList;

    /** Initializes the class. */

    function void init() {

        let ram = 0;
        let heap = 2048;
        let freeList = 2048;
        do Memory.poke(heap, 14335);
        do Memory.poke(heap + 1, 0);
        return; 
    }

    /** Returns the RAM value at the given address. */

    function int peek(int address) {

        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */

    function void poke(int address, int value) {

        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */

    function int alloc(int size) {

        var int currentBlock;
        var int returnAdress;
        let currentBlock = freeList;
        while (Memory.peek(currentBlock) < (size + 1)){
            if (Memory.peek(currentBlock + 1) = 0){
                return -1;
            }
            let currentBlock = Memory.peek(currentBlock + 1);
        }
        
        let returnAdress = currentBlock + (Memory.peek(currentBlock) - size); 
        do Memory.poke(currentBlock, Memory.peek(currentBlock) - size - 1);  
        do Memory.poke(returnAdress - 1, size + 1);
        return returnAdress;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
     
    function void deAlloc(Array o) {

        var int currentBlock;
        if ((o > (heap + 14335)) | (o < heap)){
            return;
        }
        let currentBlock = freeList;
        while (~(Memory.peek(currentBlock + 1) = 0)){
            let currentBlock = Memory.peek(currentBlock + 1);
        }
        do Memory.poke(currentBlock + 1, o-1);
        do Memory.poke(o, 0);
        return; 
    }    

    /** If the parameter is an Array, the function returns the maximal element contained in the Array.
     *  If the parameter is an object, the function returns the maximal field of the object. */
     
    function int max(Array o) {

        var int indx, max;
        let max = o[0];
        let indx = 0;
        while (indx < (Memory.peek(o-1) - 1)){
            let max = Math.max(max, o[indx]);
            let indx = indx + 1;
        }
        return max;
        
    }    
}
