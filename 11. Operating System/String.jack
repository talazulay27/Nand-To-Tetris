// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */

class String {

    field Array str;
    field int strLength, strMaxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */

    constructor String new(int maxLength) {

        if (maxLength = 0){
            let strLength = 0;
            let strMaxLength = 1;
            let str = Array.new(strMaxLength);
            return this;
        }
        else{
            let str = Array.new(maxLength);
            let strLength = 0;
            let strMaxLength = maxLength;
            return this;
        }

    }

    /** Disposes this string. */

    method void dispose() {

        if (strMaxLength > 0){

            do str.dispose();
            let strLength = 0;
        }
        return;
    }

    /** Returns the current length of this string. */

    method int length() {

        return strLength;
    }

    /** Returns the character at the j-th location of this string. */

    method char charAt(int j) {

        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */

    method void setCharAt(int j, char c) {

        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */

    method String appendChar(char c) {

        if (strLength = strMaxLength){
            return this; 
        }
        else {
            let str[strLength] = c;
            let strLength = strLength + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */

    method void eraseLastChar() {

        if (strLength = 0){
            return; 
        }
        else {
            let strLength = strLength - 1;
        }
        return;

    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */

    method int intValue() {

        var int val, i, d;
        var boolean isNeg;
        let val = 0;
        let i = 0;
        if (str[i] = 45){
            let isNeg = true;
            let i = 1;
        }
        else
        {
            let isNeg = false;
        }

        while ((i < strLength) & ((str[i] > 47) & (str[i] < 58))){
            let d = str[i] - 48;
            let val = val * 10;
            let val = val + d;
            let i = i + 1;
        }

        if (isNeg){
            return -1 * val; 
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */

    method void setInt(int val) {

        if (val < 0){
            let val = -1 * val;
            let strLength = 0;
            do appendChar(45);
            do setIntHelper(val);
            return;
        }
        else {
            let strLength = 0;
            do setIntHelper(val);
            return;
        }
        
    }

    method void setIntHelper(int val){
        
        var int lastDigit, mod;
        var char c;
        let mod = val / 10;
        let mod = val - (mod * 10);
        let lastDigit = mod + 48;
        if (val < 10){
            do appendChar(lastDigit);
        }
        else{
            do setIntHelper(val/10);
            do appendChar(lastDigit);
        }
        return;
    }

    /** Returns the new line character. */

    function char newLine() {

        return 128;
    }

    /** Returns the backspace character. */

    function char backSpace() {

        return 129;
    }

    /** Returns the double quote (") character. */

    function char doubleQuote() {

        return 34;
    }
}
